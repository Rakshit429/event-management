from flask import Flask, render_template, request, redirect
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from flask_migrate import Migrate
import json


app = Flask(__name__)


app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///kars.db"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)
migrate=Migrate(app,db)
# class Todo(db.Model):
#     sno = db.Column(db.Integer, primary_key=True)
#     title = db.Column(db.String(200), nullable=False)
#     desc = db.Column(db.String(500), nullable=False)
#     date_created = db.Column(db.DateTime, default=datetime.utcnow)

#     def __repr__(self) -> str:
#         return f"{self.sno} - {self.title}"

# @app.route('/', methods=['GET', 'POST'])
# def hello_world():
#     if request.method=='POST':
#         title = request.form['title']
#         desc = request.form['desc']
#         todo = Todo(title=title, desc=desc)
#         db.session.add(todo)
#         db.session.commit()
        
#     allTodo = Todo.query.all() 
#     return render_template('index.html', allTodo=allTodo)
 
class Registration(db.Model):
    entryno = db.Column(db.String(11), primary_key=True)
    name = db.Column(db.String(40), nullable=False)
    email = db.Column(db.String(100), nullable=False)
    password = db.Column(db.String(100), nullable=False)
    role = db.Column(db.String(25), nullable=False)
    department=db.column(db.String(25))
    interest=db.column(db.String(300))


class events(db.Model):
    name = db.Column(db.String(40), primary_key=True)
    organiser = db.Column(db.String(40), nullable=False)
    description = db.Column(db.String(1000), nullable=False)
    date = db.Column(db.String(100), nullable=True)
    venue = db.Column(db.String(25), nullable=True)
    time = db.Column(db.String(25), nullable=True)
    # def __repr__(self) -> str:
    #     return f"{self.name}-description:{self.description}"

class students_events(db.Model):
    event=db.Column(db.String(40), primary_key=True)

class course_events(db.Model):
    name = db.Column(db.String(40), primary_key=True)
    course = db.Column(db.String(40), nullable=False)
    description = db.Column(db.String(1000), nullable=False)
    day = db.Column(db.String(100), nullable=True)
    venue = db.Column(db.String(25), nullable=True)
    time = db.Column(db.String(25), nullable=True)
    
@app.route('/', methods=['GET', 'POST'])
def kars_registration():
    if request.method=='POST':
        print("post")
        entryno = request.form['entryno']
        name = request.form['name']
        email = request.form['email']
        password = request.form['password']                                                                                                                             
        role=(request.form['roles[]'])
        print(request.form['roles[]'])
        registration = Registration(entryno=entryno ,name=name,email=email,password=password,role=role,interest="null",department="null")
        db.session.add(registration)
        db.session.commit()
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def kars_login():
    if request.method=='POST':
        print("post1")
        email = request.form['email']
        password = request.form['password']
        role=request.form['role']
        user = Registration.query.filter_by(email=email, password=password,role=role).first()
        if user:
            global NAME 
            NAME=user.name
            global ENTRYNO
            ENTRYNO=user.entryno
            print(NAME,ENTRYNO)
            # Login successful
            return redirect(f'/{role}')
        else:
            # Invalid credentials
            return "Invalid email or password", 401
        # value="student">Student</option>
        #                     <option value="club">Club Executive</option>
        #                     <option value="department">Department Head</option>
        #                     <option value="fest">Fest Executive</option
print(NAME,ENTRYNO)
@app.route('/student')
def kars_student():
    allevents=events.query.all()
    print(allevents)
    return render_template('student_protal.html',allevents=allevents)

@app.route('/club')
def kars_club():
    return render_template('club.html')

@app.route('/department')
def kars_department():
    return render_template('department.html')

@app.route('/student/profile', methods=['GET', 'POST'])
def kars_profile():
    if request.method=='POST':
        interests = request.form.getlist('interests')
        print("Selected interests:", interests)
        interests_json = json.dumps(interests)
        entry = Registration.query.filter_by(entryno=ENTRYNO).first()
        entry.interest=interests_json
        print(entry.interest)
        db.session.add(entry)
        db.session.commit()
    return render_template('profile.html',name=NAME)

@app.route('/student/event')
def kars_event():
    return render_template('event.html')

@app.route('/student/academic_schedule')
def kars_schedule():
    return render_template('academic_schedule.html')

@app.route('/fest', methods=['GET', 'POST'])
def kars_fest():
    if request.method=='POST':
        print("post2")
        name = request.form['eventName']
        organiser = request.form['organiser']
        description = request.form['description']
        date = request.form['date']
        time = request.form['time']
        venue = request.form['venue']
        event = events(name = name, organiser = organiser, description = description, date = date, venue = venue, time= time)
        db.session.add(event)
        db.session.commit() 
    return render_template('fest.html')
  
@app.route('/course-coordinator')
def kars_course():
    return render_template('course.html')

# @app.route('/login/<int:sno>', methods=['GET', 'POST'])
# def update(sno):
#     if request.method=='POST':
#         title = request.form['title']
#         desc = request.form['desc']
#         todo = Todo.query.filter_by(sno=sno).first()
#         todo.title = title
#         todo.desc = desc
#         db.session.add(todo)
#         db.session.commit()
#         return redirect("/")
        # registration = Registration(name=name,password=password)
        # db.session.add(registration)
        # db.session.commit() 
# @app.route('/show')
# def products():
#     allTodo = registration.query.all()
#     print(allTodo)
#     return 'this is products page'

# @app.route('/update/<int:sno>', methods=['GET', 'POST'])
# def update(sno):
#     if request.method=='POST':
#         title = request.form['title']
#         desc = request.form['desc']
#         todo = registration.query.filter_by(sno=sno).first()
#         todo.title = title
#         todo.desc = desc
#         db.session.add(todo)
#         db.session.commit()
#         return redirect("/")
        
#     todo = registration.query.filter_by(sno=sno).first()
#     return render_template('update.html', todo=todo)

# @app.route('/delete/<int:sno>')
# def delete(sno):
#     todo = registration.query.filter_by(sno=sno).first()
#     db.session.delete(todo)
#     db.session.commit()
#     return redirect("/")

if __name__ == "__main__":
    app.run(debug=True)